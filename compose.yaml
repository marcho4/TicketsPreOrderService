version: "3.9"

services:
  orchestrator:
    build:
      context: ./orchestrator
      dockerfile: Dockerfile
    environment:
      - RUNNING_IN_DOCKER=true
    env_file:
      - orchestrator/.env
    ports:
      - "8000:8000"
    networks:
      - main

  auth:
    build:
      context: ./AuthorizationService
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    networks:
      - main

  auth_postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orchestrator
    networks:
      - main
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      retries: 5
      timeout: 3s
    restart: always

  admin_postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orchestrator
    networks:
      - main
    volumes:
      - admin_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      retries: 5
      timeout: 3s
    restart: always

  admin:
    build:
      context: ./AdminService
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    networks:
      - main
    depends_on:
      - admin_postgres

  org_postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orchestrator
    networks:
      - main
    volumes:
      - org_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      retries: 5
      timeout: 3s
    restart: always

  organizer:
    build:
      context: ./OrganizerService
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    networks:
      - main
    depends_on:
      - org_postgres

  user_postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user_personal_account
    networks:
      - main
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      retries: 5
      timeout: 3s
    restart: always

  user:
    build:
      context: ./UserService
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    networks:
      - main
    depends_on:
      - user_postgres

 
  matches:
    build:
      context: ./MatchesService/MatchesService
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - main
    depends_on:
      - match_postgres

  match_postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: matches_db
      POSTGRES_USER: matches_user
      POSTGRES_PASSWORD: matches_pass
    networks:
      - main
    volumes:
      - ./MatchesService/MatchesService/Database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - matches_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "matches_user", "-d", "matches_db" ]
      interval: 5s
      retries: 5
      timeout: 3s
    restart: always
    
  tickets:
    build:
      context: ./TicketsService
      dockerfile: Dockerfile
    ports:
     - "8006:8006"
    networks:
      - main
    restart: always
    depends_on:
      - tickets_postgres

  tickets_postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tickets
    networks:
      - main
    volumes:
      - tickets_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      retries: 5
      timeout: 3s
    restart: always
      

  email:
    build:
      context: ./EmailService
      dockerfile: Dockerfile
    env_file:
      - ./EmailService/.env
    networks:
      - main
    ports:
      - "8010:8010"
    restart:
      always

  kafka-1:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-1
    restart: always
    ports:
      - "9092:9092"
      - "29092:29092"  # Внутренний порт для связи между контейнерами
    environment:
      # Настройки KRaft
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka-1:9093"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,INTERNAL://kafka-1:29092,CONTROLLER://kafka-1:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,INTERNAL://kafka-1:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER

      # Конфигурация хранилища
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_LOG_RETENTION_HOURS: 168  # Держим логи 7 дней
      KAFKA_LOG_RETENTION_BYTES: 10GB  # Ограничение по размеру

      # Безопасность и защита от ошибок
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"  # Отключаем авто-создание топиков
      KAFKA_MIN_INSYNC_REPLICAS: 2  # Минимальное количество реплик для согласованности
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
      KAFKA_NUM_PARTITIONS: 3

      # Производительность
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 3000  # Задержка ребалансировки
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: "false"  # Запрещаем "грязные" выборы лидеров

      # ID кластера (должен быть постоянным)
      KAFKA_CLUSTER_ID: "TICKETS_CLUSTER"

    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - kafka_net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "Kafka Cluster"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka-1:29092"
    depends_on:
      - kafka-1
    networks:
      - main

networks:
  main:
    driver: bridge

volumes:
  auth_postgres_data:
  admin_postgres_data:
  org_postgres_data:
  user_postgres_data:
  matches_postgres_data:
  tickets_postgres_data:
  kafka_data:

